/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package Carder_telegram
import me.ivmg.telegram.bot
import me.ivmg.telegram.dispatch
import me.ivmg.telegram.dispatcher.callbackQuery
import me.ivmg.telegram.dispatcher.command
import me.ivmg.telegram.entities.*
import org.iban4j.CountryCode
import org.iban4j.Iban
import java.io.File
import java.lang.NumberFormatException
import java.lang.StringBuilder

fun check(card:String):Boolean{
    var temp :Int
    card.forEach {
        // println("$it ${it.toInt()-48}")
        temp = it.toInt()-48
        if(!(temp==72 || (temp >= 0 && temp<10))){
            return false
        }
    }
    return true
}



var used:kotlin.ULong = 1241u
val DEVELOPERID = "66799073"
var authorizedAccount = arrayListOf<String>("206432146", "355224641")
var binText = ArrayList<ArrayList<String>>()//publisher id-bin, like
var commands = listOf<String>("generateccv","showbin", "insertbin", "generateiban", "help", "CONTROL PANEL")
var MAXELEMENTS = 10
val MAXMARGIN = 50

val LIMITECHARPROVIDER = 15

var fileLog = File("log.txt")
var fileLike = File("like.txt")


var likeArray = ArrayList<String>()
fun main(args: Array<String>) {
    fileLog.createNewFile()
    fileLike.createNewFile()

    val likeLines = fileLike.readLines()
    likeLines.forEach{
        likeArray.add(it)
    }

    val actionreplhelp = InlineKeyboardMarkup(
        listOf(
            listOf(InlineKeyboardButton("\uD83D\uDCB3/${commands[0]}", callbackData = "${commands[0]}")),
            listOf(
                InlineKeyboardButton("\uD83C\uDFE6/${commands[1]}", callbackData = "${commands[1]}"),
                InlineKeyboardButton("\uD83C\uDF10/${commands[2]}", callbackData = "${commands[2]}")
            ), listOf(InlineKeyboardButton("\uD83C\uDFE7/${commands[3]}", callbackData = "${commands[3]}")),
                listOf(InlineKeyboardButton("\uD83D\uDDA5️${commands[5]}", callbackData = "${commands[5]}"))

        )
    )
    val bot = bot {

      // token = "889885731:AAGV7M2vCScT6VWvAfddzC3xGEKd9foAfBc"
        token = "914569748:AAEcFe0PEaI-S2DJAqYQZJwVoSzvO-vjLjI"
        dispatch {

            command("start") { bot, update ->
                val repl = InlineKeyboardMarkup(
                    listOf(
                        listOf(
                            InlineKeyboardButton("LIKE bot", callbackData = "like"),
                            InlineKeyboardButton("Contact Developer", callbackData = "contDeveloper")
                        ), listOf(InlineKeyboardButton("Show Like", callbackData = "showli"))
                    )
                )
                bot.sendMessage(chatId = update.message!!.chat.id, text = "Welcome\n")
               // bot.sendPhoto(chatId = update.message!!.chat.id, photo = "https://raw.githubusercontent.com/GiuseppeFerlante99/stickerTelegram/master/stickerLogo.webp")
                bot.sendMessage(
                    chatId = update.message!!.chat.id,
                    text = "This bot generates only live cards\nType /help",
                    replyMarkup = repl
                )

            }
            command("statistic"){
                bot, update ->
                bot.sendMessage(update.message!!.chat.id, text= "USED $used TIMES")
            }
            command(commands[4]){
                bot, update ->
                bot.sendMessage(
                    chatId = update.message!!.chat.id,
                    text = "Select one for reading the help",
                    replyMarkup = actionreplhelp
                )
            }
            callbackQuery("showli"){
                bot,update ->
                bot.sendMessage(chatId = update.callbackQuery!!.message!!.chat.id, text = "*LIKES*\n${likeArray.joinToString(separator = "\n")}\nTotal:${likeArray.size}", parseMode = ParseMode.MARKDOWN)
            }
            callbackQuery(commands[5]){
            bot, update ->
                var message = """
                    /setresults : set the numbers of results shown.
                    Max $MAXMARGIN
                    /setresult without arguments sets 10
                    
                """.trimIndent()
                bot.sendMessage(chatId = update.callbackQuery!!.message!!.chat.id, text = message)
        }
            command("setresults"){
                bot, update, args ->
                var message:String
                if(args.size==0  ) MAXELEMENTS = 10
                else{
                    try {
                        var number = args[0].toInt()
                        if(number <= MAXMARGIN && number != 0){
                            MAXELEMENTS = number
                        }
                    }catch (e:NumberFormatException){
                    }
                }
                message = "$MAXELEMENTS total results"
                bot.sendMessage(chatId = update.message!!.chat.id!!, text = message)
            }

            callbackQuery("like") {//da programmare
                    bot, update ->
                val username = update.callbackQuery!!.message!!.chat.username.toString()
                var verify = false
                for(user in likeArray)
                    if(user == username)
                        verify = true

                if(verify==false)  {
                    likeArray.add("@$username")
                    fileLike.appendText("@$username\n")
                }
                bot.sendMessage(chatId = update.callbackQuery!!.message!!.chat.id, text = "Like added.\n\uD83D\uDE18THANKS. <3")

            }
            callbackQuery("contDeveloper") { bot, update ->
                bot.sendMessage(chatId = update.callbackQuery!!.message!!.chat.id, text = "Developer: @DotSystem")
            }

            callbackQuery(commands[3]) {//generateIban
                    bot, update ->
                bot.sendMessage(
                    chatId = update.callbackQuery!!.message!!.chat.id, text = """
                        Syntax: ${commands[3]}
                        Explaination: Generate a IBAN  from german bank.
                        Example: /${commands[3]}
                """.trimIndent()
                )
            }
            callbackQuery(commands[0]) { //generate
                    bot, update ->
                println("MESSAGGIO RICEVUTO")
                bot.sendMessage(
                    chatId = update.callbackQuery!!.message!!.chat.id,
                    text = """
                        Syntax: /${commands[0]} <b>bin</b>
                        Explaination: Generate cards with this <b>bin</b>.
                        Example: /${commands[0]} <b>67x53628</b>""".trimIndent(), parseMode = ParseMode.HTML
                )
            }
            callbackQuery(commands[1]) { //showbin
                    bot, update ->
                bot.sendMessage(
                    chatId = update.callbackQuery!!.message!!.chat.id, text = """ 
                    Syntax: /showbin
                    Explaination: Show all bin available
                    Example: /showbin
                """.trimIndent(), parseMode = ParseMode.HTML
                )
            }
            callbackQuery(commands[2]) { //insert bin
                    bot, update ->
                bot.sendMessage(
                    chatId = update.callbackQuery!!.message!!.chat.id, text = """ 
                    Syntax: /insertbin <b>bin</b>
                    Explaination: Insert this <b>bin</b> in public database
                    Example: /insertbin <b>5656</b>
                """.trimIndent(), parseMode = ParseMode.HTML
                )
            }


            command(commands[3]) { bot, update ->
                var ibanList = ArrayList<String>()
                for (x in 0..MAXELEMENTS - 1) {
                    ibanList.add("✅`${Iban.random(CountryCode.DE)}`")
                }
                bot.sendMessage(
                    chatId = update.message!!.chat.id,
                    text = "${ibanList.joinToString(separator = "\n")}",
                    parseMode = ParseMode.MARKDOWN
                )
            }

            command(commands[2]) { //insert bin command
                    bot, update, args ->
                var message: String = "Errore 2.56"
                try {
                    //insertbin bin provider
                    if (args.size == 2) {

                        var verify = false
                        val id = update.message!!.from!!.id.toString()
                        for (element in authorizedAccount) {
                            if (element == id) {
                                verify = true; break
                            }
                        }
                        if (verify == false) {
                            message =
                                "For adding a bin you must : \n<b>⊙have a group/channel</b> \n<b>⊙contact</b> https://t.me/DotSystem for adding your ID in AUTHORIZED LIST.\n" +
                                        "\nYOUR ID: <b>${update.message!!.from!!.id}</b>"

                        } else {
                            var verify = false
                            val username = update.message!!.from!!.username
                            var postemp = -1
                            if (args[1].length > LIMITECHARPROVIDER) {
                                message = "Provider length must be less or equal to $LIMITECHARPROVIDER chars."
                            } else {
                                for (x in 0..binText.size - 1) {
                                    if (binText[x][0] == id) {
                                        verify = true; postemp = x
                                    }
                                }

                                if (check(args[0]) == true) {
                                    var payload = arrayListOf(
                                        id,
                                        args[1],
                                        args[0],
                                        username!!
                                    ) //id, provider, bin username

                                    if (verify == false) {
                                        if (binText.size < 20)
                                            binText.add(0, payload) //id, provider, bin, username
                                        else {
                                            binText.add(0, payload)
                                            binText =
                                                binText.subList(0, binText.size - 2) as ArrayList<ArrayList<String>>
                                        }
                                        message = "Bin added. Thanks."

                                    } else {
                                        binText.remove(binText[postemp])
                                        binText.add(0, payload)
                                        message = "Bin overwritten "
                                    }
                                }
                            }
                        }
                    } else {
                        message = "Error.\nPlease type /help for knowing how use this command."
                    }
                }catch (e:Exception){
                    fileLog.appendText("$e\n")
                    message = "There was a problem. Contact developer"
                }
                bot.sendMessage(update.message!!.chat.id, text=message, parseMode = ParseMode.HTML)
            }

            command(commands[1]) { bot, update -> // /showbin
                var text = StringBuilder()
                if(binText.size>0) {
                    binText.forEach {
                        //id provider bin
                        try {
                            text.append("Provider: *${it[1]}*\nBIN: `${it[2]}`\nUploader: @${it[3]}\n\n")
                        }catch (e:Exception){

                        }
                    }
                }
                else text.append("Nobody has added a bin.")
                bot.sendMessage(
                    parseMode = ParseMode.MARKDOWN,
                    chatId = update.message!!.chat.id,
                    text = text.toString()
                )
            }
            command(commands[0]) { bot, update, args ->
                var list = ArrayList<String>()
                var brand = "None"
                println(args.size)
                try{
                    if (args.size==1 && check(args[0]) == true and ((args[0].length < 16) || (args[0].length == 16 && args[0].indexOf("x") != -1))) {
                        var carta: String
                        used++
                        if (args[0].length >= 6) {
                            var binInformation = bin(args[0]).lookupGetBin()
                            if (binInformation != null) {
                                val label = listOf<String>("Country", "Bank")
                                for (arr in 0..binInformation!!.size - 1) {
                                    list.add("**${label[arr]}**\n")
                                    for (el in binInformation[arr]) {
                                        list.add("${el.replace("\"", "")}\n")
                                    }
                                    list.add("\n")
                                }
                                list.add("\n\n")
                            }
                        }


                        for (x in 0..MAXELEMENTS) {
                            try {
                                var ccv: Int
                                var carta: String
                                brand = cc_generator(args[0]).getBrand()
                                if (brand != "AMERICAN EXPRESS") {
                                    carta = cc_generator(args[0]).create_credit_card()
                                    ccv = (111..999).shuffled().first()
                                } else {
                                    carta = cc_generator(args[0], digits = 15).create_credit_card().substring(1)
                                    ccv = (1111..9999).shuffled().first()
                                }

                                list.add("✅ `${carta}`\n")
                                list.add("\uD83D\uDCC5 0${(1..9).shuffled().first()}|${(2020..2030).shuffled().first()}\n")
                                list.add("\uD83D\uDCB3 ${ccv}\n")
                                if (brand != "None") list.add("\uD83C\uDFAB ${brand}\n")
                                list.add("\n")
                            } catch (e: Exception) {
                                list.add("The credit card doesn't exist.") //non si puo' calcolare la carta .
                                break
                            }
                        }
                        bot.sendMessage(
                            parseMode = ParseMode.MARKDOWN,
                            chatId = update.message!!.chat.id,
                            text = list.toString().replace("[", "").replace("]", "")
                                .replace(",", "")
                        )
                    } else if (args.size==0 || args[0].length > 16) {
                        bot.sendMessage(
                            chatId = update.message!!.chat.id,
                            text = "This isn't a bin."
                        )
                    } else {
                        bot.sendMessage(
                            chatId = update.message!!.chat.id,
                            text = "Error. PLEASE types /help"
                        )
                    }
            }catch (e:Exception){
                    fileLog.appendText("$e\n")
                }
            }
        }
    }
    bot.startPolling()
}

